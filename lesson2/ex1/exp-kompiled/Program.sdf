module Program

imports Common
imports KBuiltinsBasic
exports

context-free syntax
context-free priorities
{
    Int -> Exp {}
    Exp "*" Exp -> Exp {cons("Exp1488Syn")}
    Exp "/" Exp -> Exp {cons("Exp1522Syn")}
} > {
    Exp "+" Exp -> Exp {cons("Exp1480Syn")}
    Exp "-" Exp -> Exp {cons("Exp1469Syn")}
    "let" InsertDzId "=" InsertDzExp "in" Exp -> Exp {cons("Exp1542Syn")}
}

context-free start-symbols
DzString DzBool String Int KResult Stmt Float Bool Ids Id Exp DzInt DzFloat K
context-free syntax
    "var" InsertDzIds ";" -> Stmt {cons("Stmt1366Syn")}
    DzString -> String {}
    DzBool -> Bool {}
    Int -> KResult {}
    "(" InsertDzExp ")" -> Exp {cons("Exp1Bracket")}
    Exp ";" -> Stmt {cons("Stmt1324Syn")}
    DzInt -> Int {}
    {Id ","}* -> Ids {cons("Ids1ListSyn")}
    DzFloat -> Float {}
    "read" -> Exp {cons("Exp1278Syn")}
    Id "=" InsertDzExp ";" -> Stmt {cons("Stmt1290Syn")}
    "print" "(" InsertDzExp ")" -> Exp {cons("Exp1309Syn")}
    Stmt Stmt -> Stmt {left, cons("Stmt1430Syn")}
    Ids -> InsertDzIds
    Id -> InsertDzId
    Exp -> InsertDzExp


    DzDzString        -> DzString    {cons("DzString1Const")}
    DzDzBool        -> DzBool    {cons("DzBool1Const")}
    DzDzInt        -> DzInt    {cons("DzInt1Const")}
    DzDzId        -> DzId    {cons("DzId1Const")}
    DzDzFloat        -> DzFloat    {cons("DzFloat1Const")}



%% start symbols subsorts
    KItem        -> K
    DzString        -> K
    DzBool        -> K
    String        -> K
    Int        -> K
    Stmt        -> K
    Float        -> K
    Bool        -> K
    Id        -> K
    Exp        -> K
    DzInt        -> K
    DzFloat        -> K
lexical syntax
    "Infinity" -> DzDzFloat
    "true" -> DzDzBool
    "false" -> DzDzBool
    "NaN" -> DzDzFloat


    "read" -> IdDz {reject}
    "Infinity" -> IdDz {reject}
    "in" -> IdDz {reject}
    "var" -> IdDz {reject}
    "false" -> IdDz {reject}
    "print" -> IdDz {reject}
    "true" -> IdDz {reject}
    "let" -> IdDz {reject}
    "NaN" -> IdDz {reject}

lexical restrictions
    %% follow restrictions


lexical syntax
    [A-Za-z\_][A-Za-z0-9\_]* -> IdDz
    "read" -> IdDz {reject}
    "Infinity" -> IdDz {reject}
    "in" -> IdDz {reject}
    "var" -> IdDz {reject}
    "false" -> IdDz {reject}
    "print" -> IdDz {reject}
    "true" -> IdDz {reject}
    "let" -> IdDz {reject}
    "NaN" -> IdDz {reject}
    [\-\+]? [0-9]+ -> DzIntDz
    [\+\-]?[0-9]+"."[0-9]+([eE][\+\-]?[0-9]+)?([fFdD]|([pP][0-9]+[xX][0-9]+))? -> DzFloatDz
    [\+\-]?"Infinity"([fFdD]|([pP][0-9]+[xX][0-9]+))? -> DzFloatDz
    "Infinity" -> DzFloatDz {reject}
    "NaN"([fFdD]|([pP][0-9]+[xX][0-9]+))? -> DzFloatDz
    "NaN" -> DzFloatDz {reject}
    "\"" ((~[\"\n\r\\]) | (((([\\][nrtf\"\\]) | ([\\][x][0-9a-fA-F][0-9a-fA-F])) | ([\\][u][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])) | ([\\][U][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])))* "\"" -> DzStringDz
context-free syntax
    DzStringDz -> DzString {cons("DzString1Const")}
    IdDz -> Id {cons("Id1Const")}
    DzIntDz -> DzInt {cons("DzInt1Const")}
    DzFloatDz -> DzFloat {cons("DzFloat1Const")}


context-free restrictions
    Id -/- [A-Za-z0-9\_]
    DzInt -/-  [0-9]
